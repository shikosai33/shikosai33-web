---
import { getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import { getLocationLocale } from "@/utils/location/getLocationLocale";
import Layout from "@/layouts/Layout.astro";
import ColoredContainer from "@/components/ColoredContainer.astro";
import ButtonLink from "@/components/ButtonLink.astro";
import KawaiiContainer from "@/components/KawaiiContainer.astro";
import ColoredHeading from "@/components/ColoredHeading.astro";
import SubHeading from "@/components/SubHeading.astro";
import SchoolMap from "@/content/locations/_maps/school_map.svg";

import {
  LayoutGrid,
  Globe,
  Instagram,
  Twitter,
  PartyPopper,
  MapPinned,
  Settings,
} from "lucide-astro";

export async function getStaticPaths() {
  return (await getCollection("circles")).map((entry) => ({
    params: { slug: entry.slug },
    props: entry,
  }));
}

const circleEntry = Astro.props;
const {
  data: {
    name,
    image,
    "organizer-name": organizerName,
    location: { id: locationSlug },
    category,
    summary,
    urls,
  },
} = circleEntry;
const { Content } = await circleEntry.render();
const { data: location } = await getEntry("locations", locationSlug);

const hasExternalLinks = urls && urls?.length > 0;
const isOrganizerNameUnique = organizerName !== name;

// getStaticPaths() ignored in dynamic page /src/pages/event/[slug].astro.
// Add `export const prerender = true;` to prerender the page as static HTML during the build process.
export const prerender = true;
---

<Layout
  title={isOrganizerNameUnique ? `${name} (${organizerName})` : name}
  description={summary}
  image={new URL(image.src, import.meta.env.SITE).href}
  imageAlt={`${name}のサークルカット`}
  imageWidth={image.width}
  imageHeight={image.height}
>
  <main class="flex flex-col w-full gap-6">
    <KawaiiContainer
      class="flex-col gap-6 !w-auto -mx-1 -mt-20 pt-24 md:mx-0 md:mt-0 md:pt-6"
      color="yellow"
    >
      <div
        class="relative w-full max-w-[320px] lg:max-w-[450px] aspect-square flex items-center justify-center overflow-visible md:m-6"
      >
        <Image
          aria-hidden
          src={image}
          alt={`${name}のサークルカット`}
          widths={[320, 450, 640, 900, 960, 1350, image.width]}
          sizes="(min-width: 1024px) 450px, 320px"
          loading="eager"
          class="absolute w-full opacity-50 aspect-square rounded-xl justify-self-center blur-2xl saturate-150 brightness-125"
        />
        <div
          aria-hidden
          class="absolute -inset-px bg-gradient-to-b from-yellow-1 to-yellow-a-1 rounded-[13px]"
        >
        </div>
        <Image
          data-pagefind-meta="image[src], image_alt[alt]"
          src={image}
          alt={`${name}のサークルカット`}
          widths={[320, 450, 640, 900, 960, 1350, image.width]}
          sizes="(min-width: 1024px) 450px, 320px"
          loading="eager"
          class="relative w-full shadow-md aspect-square rounded-xl shadow-mauve-a-3"
        />
      </div>
      <ColoredHeading
        data-pagefind-meta="title"
        as="h2"
        class="text-4xl text-center md:text-5xl"
        color="yellow"
        text={name}
      />
      <div class="flex gap-1.5">
        {
          organizerName && isOrganizerNameUnique && (
            <p
              data-pagefind-meta="開催団体"
              class="text-sm font-bold leading-tight text-mauve-11 line-clamp-1 shrink-0"
            >
              <PartyPopper class="w-4 h-4 inline stroke-[3px] mr-1.5" />
              {organizerName}
            </p>
          )
        }
        <p data-pagefind-meta="場所" class="text-sm font-bold text-mauve-11">
          <MapPinned class="w-4 h-4 inline stroke-[3px] mr-1.5" />{
            getLocationLocale(location)
          }
        </p>
        <p data-pagefind-meta="区分" class="text-sm font-bold text-mauve-11">
          <Settings class="w-4 h-4 inline stroke-[3px] mr-1.5" />{category}
        </p>
      </div>
    </KawaiiContainer>

    <ColoredContainer
      data-pagefind-body
      color="yellow"
      class="relative flex-col"
    >
      <p
        class:list={[
          "text-lg  font-Dela text-mauve-3 text-stroke-2 text-stroke-mauve-11 paint-sfm flex-shrink",
        ]}
      >
        {summary}
      </p>
      {
        hasExternalLinks && (
          <nav
            aria-label={`${name}の外部リンク`}
            class="flex flex-row items-end justify-end flex-grow -mt-1 text-xs text-mauve-11 font-Dela"
          >
            {urls?.sort().map((url) => {
              const hostname = new URL(url).hostname;
              if (hostname.endsWith("x.com")) {
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    aria-label={`${name}をXでフォローする`}
                    class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Twitter class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              }
              if (hostname.endsWith("instagram.com")) {
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    aria-label={`${name}をInstagramでフォローする`}
                    class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Instagram class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              }
              return (
                <a
                  href={url}
                  target="_blank"
                  rel="noopener"
                  class="p-1 rounded transition-color hover:bg-mauve-3 active:bg-mauve-4"
                >
                  <Globe class="inline w-4 h-4 stroke-[3px]" />
                </a>
              );
            })}
          </nav>
        )
      }
      <div class="text-base font-Dela text-mauve-11 empty:hidden">
        <hr class="mb-4 text-yellow-9 last:hidden" />
        <Content />
      </div>
    </ColoredContainer>

    <ColoredContainer color="yellow" class="relative flex-col">
      <ColoredHeading as="h3" color="yellow" class="text-4xl" text="出展場所" />
      <SubHeading as="h3" class="self-center"
        >{getLocationLocale(location)}</SubHeading
      >
      <div class="grid w-full h-auto gap-6 2xl:grid-cols-2">
        <Image src={SchoolMap} alt="茨城高専の構内地図" />
        <Image src={location.map} alt={`${location["building-name"]}の地図`} />
      </div>
    </ColoredContainer>

    <ButtonLink href="/circle" class="self-center">
      <LayoutGrid class="inline w-6 h-6 stroke-[2px] stroke-mauve-11" />
      <p class="text-base text-center text-mauve-11 font-Dela">
        サークルの一覧へ戻る
      </p>
    </ButtonLink>
  </main>
</Layout>
