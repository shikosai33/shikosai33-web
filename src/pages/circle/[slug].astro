---
import { getCollection, getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getLocationLocale } from '@/utils/location/getLocationLocale';
import Layout from '@/layouts/Layout.astro';
import Slideshow from '@/components/slideshow.astro';
import Footer from '@/components/footer.astro';
import Shikosai33 from '@/assets/shikosai33_logo.png';
import KawaiiText from '@/assets/kawaii_text_yellow.png';
import SchoolMap from '@/content/locations/_maps/school_map.svg';
import {
  LayoutGrid,
  Globe,
  Instagram,
  Twitter,
  PartyPopper,
  MapPinned,
  Settings,
} from 'lucide-astro';

export async function getStaticPaths() {
  return (await getCollection('circles')).map((entry) => ({
    params: { slug: entry.slug },
    props: entry,
  }));
}

const circleEntry = Astro.props;
const {
  data: {
    name,
    image,
    'organizer-name': organizerName,
    location: { id: locationSlug },
    category,
    summary,
    urls,
  },
} = circleEntry;
const { Content } = await circleEntry.render();
const { data: location } = await getEntry('locations', locationSlug);

const hasExternalLinks = urls && urls?.length > 0;
const isOrganizerNameUnique = organizerName !== name;

// getStaticPaths() ignored in dynamic page /src/pages/event/[slug].astro.
// Add `export const prerender = true;` to prerender the page as static HTML during the build process.
export const prerender = true;
---

<Layout title="イベント">
  <main class="flex min-h-screen flex-col items-center justify-between p-24">
    <div
      class="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex"
    >
      <h1
        class="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30"
      >
        第33回茨香祭&nbsp;2024年10月26日,27日
      </h1>
    </div>

    <div
      class="relative z-[-1] flex place-items-center before:absolute before:h-[300px] before:w-full before:-translate-x-1/2 before:rounded-full before:bg-[radial-gradient(var(--tw-gradient-stops))] before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 sm:before:w-[480px] sm:after:w-[240px] before:lg:h-[360px]"
    >
      <Image
        src={Shikosai33}
        alt="第33回茨香祭のロゴ"
        class="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70]"
      />
    </div>

    <Slideshow />
    <!-- ここから -->
    <div class="w-full flex flex-col gap-6 bg-mauve-1">
      <div
        class="relative flex flex-col gap-3 justify-center items-center rounded-3xl overflow-hidden bg-gradient-to-b from-yellow-a-9 to-mauve-a-1"
      >
        <Image
          src={KawaiiText}
          alt={'カワイイ ♡ ≧A≦ ♡ キュルキュル ♡ トキメキ ♡ ドキドキ ♡ アコガレ ♡ オモイデ'}
          loading="lazy"
          class="absolute top-0 left-0 w-full h-full object-cover mix-blend-color-burn"
        />
        <div class="m-6 flex justify-center items-center relative">
          <Image
            src={image}
            alt={`${name}のアーティスト写真またはサムネイル`}
            loading="lazy"
            class="w-1/2 aspect-square rounded-xl absolute justify-self-center inset-0 blur-lg opacity-50"
          />
          <Image
            src={image}
            alt={`${name}のアーティスト写真またはサムネイル`}
            loading="lazy"
            class="w-1/2 aspect-square rounded-xl relative"
          />
        </div>
        <h2 class="relative text-center">
          <span
            data-text=`${name}`
            class:list={[
              'inline-block text-5xl font-Dela text-yellow-11 text-stroke-mauve-1 text-stroke-[8px] paint-sfm drop-shadow-bump shadow-mauve-6',
              "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-gradient-to-b before:from-yellow-11 before:to-yellow-12 before:bg-clip-text before:pointer-events-none",
            ]}
          >
            {name}
          </span>
        </h2>
        <div class="flex gap-1.5">
          {
            organizerName && isOrganizerNameUnique && (
              <p class="text-sm font-bold text-mauve-11 line-clamp-1 shrink-0 leading-tight">
                <PartyPopper class="w-4 h-4 inline stroke-[3px] mr-1.5" />
                {organizerName}
              </p>
            )
          }
          <p class="text-sm font-bold text-mauve-11">
            <MapPinned class="w-4 h-4 inline stroke-[3px] mr-1.5" />{
              getLocationLocale(location)
            }
          </p>
          <p class="text-sm font-bold text-mauve-11">
            <Settings class="w-4 h-4 inline stroke-[3px] mr-1.5" />{category}
          </p>
        </div>
      </div>

      <div
        class="flex flex-col gap-3 p-6 rounded-3xl border border-solid border-yellow-6 bg-gradient-to-b from-mauve-1 to-yellow-1 shadow-[0px_4px_16px_0px_var(--yellow-a3),_0px_4px_0px_0px_var(--yellow-9)]"
      >
        <p
          class:list={[
            'text-lg  font-Dela text-mauve-3 text-stroke-2 text-stroke-mauve-11 paint-sfm flex-shrink',
          ]}
        >
          {summary}
        </p>
        {
          hasExternalLinks && (
            <nav
              aria-label={`${name}の外部リンク`}
              class="flex flex-row items-end justify-end flex-grow -mt-1 text-xs text-mauve-11 font-Dela"
            >
              {urls?.sort().map((url) => {
                const hostname = new URL(url).hostname;
                if (hostname.endsWith('x.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をXでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Twitter class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                if (hostname.endsWith('instagram.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をInstagramでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Instagram class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    class="p-1 rounded transition-color hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Globe class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              })}
            </nav>
          )
        }
        <hr class="text-yellow-9 last:hidden" />
        <Content />
      </div>

      <div
        class="flex flex-col gap-3 justify-center items-center p-6 rounded-3xl border border-solid border-yellow-6 bg-gradient-to-b from-mauve-1 to-yellow-1 shadow-[0px_4px_16px_0px_var(--yellow-a3),_0px_4px_0px_0px_var(--yellow-9)]"
      >
        <h2 id="class" class="relative whitespace-nowrap lg:self-start">
          <span
            data-text="出展場所"
            class:list={[
              'inline-block text-4xl font-Dela text-yellow-11 text-stroke-mauve-1 text-stroke-[8px] paint-sfm drop-shadow-bump shadow-mauve-6',
              "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-gradient-to-b before:from-yellow-11 before:to-yellow-12 before:bg-clip-text before:pointer-events-none",
            ]}
          >
            出展場所
          </span>
        </h2>
        <h3 class="relative inline-block rounded-lg bg-mauve-a-3">
          <span
            data-text=`${getLocationLocale(location)}`
            class:list={[
              'inline-block text-lg text-center font-Dela text-mauve-11 text-stroke-mauve-1 text-stroke-4 paint-sfm drop-shadow-bump shadow-mauve-6',
              "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-mauve-11 before:bg-clip-text before:pointer-events-none",
            ]}
          >
            {getLocationLocale(location)}
          </span>
        </h3>
        <div class="w-full h-auto grid grid-cols-2 gap-6">
          <Image src={SchoolMap} alt="茨城高専構内地図" />
          <Image src={location.map} alt="茨城高専構内地図" />
        </div>
      </div>

      <a
        href="/circle"
        class="w-auto m-auto px-4 py-2 flex justify-center items-center gap-2 rounded-full bg-mauve-1 border-maube-2 shadow-[0px_4px_0px_0px_var(--mauve-11)]"
      >
        <LayoutGrid class="inline w-6 h-6 stroke-[2px] stroke-mauve-11" />
        <p class="text-mauve-11 text-center font-Dela text-base">
          サークルの一覧へ戻る
        </p>
      </a>
    </div>
    <!-- ここまで -->
  </main>
  <Footer />
</Layout>

<style>
  :root {
    --foreground-rgb: 0, 0, 0;
    --background-start-rgb: 214, 219, 220;
    --background-end-rgb: 255, 255, 255;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --foreground-rgb: 255, 255, 255;
      --background-start-rgb: 0, 0, 0;
      --background-end-rgb: 0, 0, 0;
    }
  }

  body {
    color: rgb(var(--foreground-rgb));
    background: linear-gradient(
        to bottom,
        transparent,
        rgb(var(--background-end-rgb))
      )
      rgb(var(--background-start-rgb));
  }
</style>
