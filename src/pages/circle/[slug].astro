---
import { getCollection, getEntry } from "astro:content";
import { Image } from "astro:assets";
import { getLocationLocale } from "@/utils/location/getLocationLocale";
import Layout from "@/layouts/Layout.astro";
import ColoredContainer from "@/components/ColoredContainer.astro";
import ButtonLink from "@/components/ButtonLink.astro";
import KawaiiText from "@/assets/kawaii_text_yellow.png";
import SchoolMap from "@/content/locations/_maps/school_map.svg";

import {
  LayoutGrid,
  Globe,
  Instagram,
  Twitter,
  PartyPopper,
  MapPinned,
  Settings,
} from "lucide-astro";

export async function getStaticPaths() {
  return (await getCollection("circles")).map((entry) => ({
    params: { slug: entry.slug },
    props: entry,
  }));
}

const circleEntry = Astro.props;
const {
  data: {
    name,
    image,
    "organizer-name": organizerName,
    location: { id: locationSlug },
    category,
    summary,
    urls,
  },
} = circleEntry;
const { Content } = await circleEntry.render();
const { data: location } = await getEntry("locations", locationSlug);

const hasExternalLinks = urls && urls?.length > 0;
const isOrganizerNameUnique = organizerName !== name;

// getStaticPaths() ignored in dynamic page /src/pages/event/[slug].astro.
// Add `export const prerender = true;` to prerender the page as static HTML during the build process.
export const prerender = true;
---

<Layout title={isOrganizerNameUnique ? `${name} (${organizerName})` : name}>
  <main class="w-full flex flex-col gap-6">
    <div
      class="relative flex flex-col gap-3 justify-center items-center overflow-hidden bg-gradient-to-b from-yellow-a-9 to-mauve-a-1 -mx-1 mt-[-88px] px-1 pt-[88px] md:mx-0 md:mt-0 md:px-0 md:pt-0 md:rounded-t-3xl"
    >
      <Image
        src={KawaiiText}
        alt={"カワイイ ♡ ≧A≦ ♡ キュルキュル ♡ トキメキ ♡ ドキドキ ♡ アコガレ ♡ オモイデ"}
        loading="lazy"
        class="absolute top-0 left-0 w-full h-full object-cover mix-blend-color-burn"
      />
      <div class="m-6 flex justify-center items-center relative">
        <Image
          aria-hidden
          src={image}
          alt={`${name}のサークルカット`}
          loading="lazy"
          class="w-full max-w-[320px] lg:max-w-[470px] aspect-square rounded-xl absolute justify-self-center blur-lg opacity-50"
        />
        <Image
          data-pagefind-meta="image[src], image_alt[alt]"
          src={image}
          alt={`${name}のサークルカット`}
          loading="lazy"
          class="w-full max-w-[300px] lg:max-w-[450px] aspect-square rounded-xl relative"
        />
      </div>
      <h2 class="relative text-center">
        <span
          data-pagefind-meta="title"
          data-text=`${name}`
          class:list={[
            "inline-block text-4xl font-Dela text-yellow-11 text-stroke-mauve-1 text-stroke-[8px] paint-sfm drop-shadow-bump shadow-mauve-6 md:text-5xl",
            "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-gradient-to-b before:from-yellow-11 before:to-yellow-12 before:bg-clip-text before:pointer-events-none",
          ]}
        >
          {name}
        </span>
      </h2>
      <div class="flex gap-1.5">
        {
          organizerName && isOrganizerNameUnique && (
            <p
              data-pagefind-meta="開催団体"
              class="text-sm font-bold text-mauve-11 line-clamp-1 shrink-0 leading-tight"
            >
              <PartyPopper class="w-4 h-4 inline stroke-[3px] mr-1.5" />
              {organizerName}
            </p>
          )
        }
        <p data-pagefind-meta="場所" class="text-sm font-bold text-mauve-11">
          <MapPinned class="w-4 h-4 inline stroke-[3px] mr-1.5" />{
            getLocationLocale(location)
          }
        </p>
        <p data-pagefind-meta="区分" class="text-sm font-bold text-mauve-11">
          <Settings class="w-4 h-4 inline stroke-[3px] mr-1.5" />{category}
        </p>
      </div>
    </div>

    <ColoredContainer
      data-pagefind-body
      color="yellow"
      class="relative flex-col"
    >
      <p
        class:list={[
          "text-lg  font-Dela text-mauve-3 text-stroke-2 text-stroke-mauve-11 paint-sfm flex-shrink",
        ]}
      >
        {summary}
      </p>
      {
        hasExternalLinks && (
          <nav
            aria-label={`${name}の外部リンク`}
            class="flex flex-row items-end justify-end flex-grow -mt-1 text-xs text-mauve-11 font-Dela"
          >
            {urls?.sort().map((url) => {
              const hostname = new URL(url).hostname;
              if (hostname.endsWith("x.com")) {
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    aria-label={`${name}をXでフォローする`}
                    class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Twitter class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              }
              if (hostname.endsWith("instagram.com")) {
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    aria-label={`${name}をInstagramでフォローする`}
                    class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Instagram class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              }
              return (
                <a
                  href={url}
                  target="_blank"
                  rel="noopener"
                  class="p-1 rounded transition-color hover:bg-mauve-3 active:bg-mauve-4"
                >
                  <Globe class="inline w-4 h-4 stroke-[3px]" />
                </a>
              );
            })}
          </nav>
        )
      }
      <div class="text-base font-Dela text-mauve-11 empty:hidden">
        <hr class="text-yellow-9 last:hidden" />
        <Content />
      </div>
    </ColoredContainer>

    <ColoredContainer color="yellow" class="relative flex-col">
      <h2 id="class" class="relative whitespace-nowrap lg:self-start">
        <span
          data-text="出展場所"
          class:list={[
            "inline-block text-4xl font-Dela text-yellow-11 text-stroke-mauve-1 text-stroke-[8px] paint-sfm drop-shadow-bump shadow-mauve-6",
            "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-gradient-to-b before:from-yellow-11 before:to-yellow-12 before:bg-clip-text before:pointer-events-none",
          ]}
        >
          出展場所
        </span>
      </h2>
      <h3 class="relative inline-block mx-auto rounded-lg bg-mauve-a-3">
        <span
          data-text=`${getLocationLocale(location)}`
          class:list={[
            "inline-block text-lg text-center font-Dela text-mauve-11 text-stroke-mauve-1 text-stroke-4 paint-sfm drop-shadow-bump shadow-mauve-6",
            "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-mauve-11 before:bg-clip-text before:pointer-events-none",
          ]}
        >
          {getLocationLocale(location)}
        </span>
      </h3>
      <div class="w-full h-auto grid gap-6 2xl:grid-cols-2">
        <Image src={SchoolMap} alt="茨城高専構内地図" />
        <Image src={location.map} alt="茨城高専構内地図" />
      </div>
    </ColoredContainer>

    <ButtonLink href="/circle" class="mx-auto">
      <LayoutGrid class="inline w-6 h-6 stroke-[2px] stroke-mauve-11" />
      <p class="text-mauve-11 text-center font-Dela text-base">
        サークルの一覧へ戻る
      </p>
    </ButtonLink>
  </main>
</Layout>
