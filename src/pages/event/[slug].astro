---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { formatDateTimeRange } from '@/utils/datetime/formatDateTimeRange';
import Layout from '@/layouts/Layout.astro';
import EventCard from '@/components/EventCard.astro';
import { EventStatus } from '@/components/EventStatus.tsx';
import ColoredContainer from '@/components/ColoredContainer.astro';
import KawaiiContainer from '@/components/KawaiiContainer.astro';
import ColoredHeading from '@/components/ColoredHeading.astro';
import SubHeading from '@/components/SubHeading.astro';
import ButtonLink from '@/components/ButtonLink.astro';
import {
  MessageCircleWarning,
  Clock,
  LayoutGrid,
  Globe,
  Instagram,
  Twitter,
  Youtube,
  PartyPopper,
} from 'lucide-astro';

export async function getStaticPaths() {
  const eventEntries = (await getCollection('events')).sort((a, b) => {
    if (a.data.location.id == b.data.location.id) {
      return a.data['starts-at'].getTime() - b.data['starts-at'].getTime();
    }
    return a.data.location.id.localeCompare(b.data.location.id);
  });

  return eventEntries.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      previousEvent: index > 0 && eventEntries[index - 1]?.data.location.id == entry.data.location.id ? eventEntries[index - 1]?.slug : null,
      nextEvent:
        index < eventEntries.length - 1 && eventEntries[index + 1]?.data.location.id == entry.data.location.id ? eventEntries[index + 1]?.slug : null,
    },
  }));
}

const {
  entry: {
    slug,
    data: {
      name,
      image,
      summary,
      "organizer-name": organizerName,
      urls,
      youtube,
      'starts-at': startsAt,
      'ends-at': endsAt,
    },
    render,
  },
  nextEvent: nextEvent,
  previousEvent: previousEvent,
} = Astro.props;

const { startsAtText, endsAtText } = formatDateTimeRange(startsAt, endsAt);
const hasExternalLinks = (urls && urls?.length > 0) || !!youtube;
const youtubeWatchId = youtube ? new URL(youtube).searchParams.get('v') : null;

const isFireworks = (slug === "fireworks");
const { Content } = await render();

// getStaticPaths() ignored in dynamic page /src/pages/event/[slug].astro.
// Add `export const prerender = true;` to prerender the page as static HTML during the build process.
export const prerender = true;
---

<Layout title={name} description={summary} image={new URL(image.src, import.meta.env.SITE).href} imageAlt={`${name}のアーティスト写真またはサムネイル`} imageWidth={image.width} imageHeight={image.height}>
    <main class="flex flex-col w-full gap-6">
      <KawaiiContainer class="flex-col gap-6 !w-auto -mx-1 -mt-20 pt-24 md:mx-0 md:mt-0 md:pt-6" color='violet'>
        <div class="relative w-full max-w-[320px] lg:max-w-[450px] aspect-square flex items-center justify-center overflow-visible md:m-6">
          <Image aria-hidden
            src={image}
            alt={`${name}のアーティスト写真またはサムネイル`}
            widths={[320, 450, 640, 900, 960, 1350, image.width]}
            sizes="(min-width: 1024px) 450px, 320px"
            loading="eager"
            class="absolute w-full opacity-50 aspect-square rounded-xl justify-self-center blur-2xl saturate-150 brightness-125"
          />
          <div aria-hidden class="absolute -inset-px bg-gradient-to-b from-violet-1 to-violet-a-1 rounded-[13px]"/>
          <Image
            data-pagefind-meta="image[src], image_alt[alt]"
            src={image}
            alt={`${name}のアーティスト写真またはサムネイル`}
            widths={[320, 450, 640, 900, 960, 1350, image.width]}
            sizes="(min-width: 1024px) 450px, 320px"
            loading="eager"
            class="relative w-full shadow-md aspect-square rounded-xl shadow-mauve-a-3"
          />
        </div>
        <ColoredHeading data-pagefind-meta="title" as="h2" class="text-4xl text-center md:text-5xl" color="violet" text={name} />
        {
        organizerName != undefined &&
          <div class="flex gap-1.5">
            <p data-pagefind-meta="開催団体" class="text-sm font-bold text-mauve-11">
              <PartyPopper class="w-4 h-4 inline stroke-[3px] mr-1.5" />
              {organizerName}
            </p>
          </div>
        }
        <div class="flex gap-1.5">
          <p data-pagefind-meta="開催日時" class="text-sm font-bold text-mauve-11">
            <Clock class="w-4 h-4 inline stroke-[3px] mr-1.5" />
            <time datetime={startsAt.toISOString()}>
              {startsAt.getMonth() + 1}月{startsAt.getDate()}日({["日","月","火","水","木","金","土"][startsAt.getDay()]}) {startsAtText}
            </time>
            ~
            <time datetime={endsAt.toISOString()}>{endsAtText}</time>
          </p>
          <EventStatus startsAt={startsAt} endsAt={endsAt} />
        </div>
      </KawaiiContainer>

      <ColoredContainer data-pagefind-body color='violet' class="flex-col">
        <p
          class:list={[
            'text-lg  font-Dela text-mauve-3 text-stroke-2 text-stroke-mauve-11 paint-sfm flex-shrink',
          ]}
        >
          {summary}
        </p>
        {
          hasExternalLinks && (
            <nav
              aria-label={`${name}の外部リンク`}
              class="flex flex-row items-end justify-end flex-grow -mt-1 text-xs text-mauve-11 font-Dela"
            >
              {urls?.sort().map((url) => {
                const hostname = new URL(url).hostname;
                if (hostname.endsWith('x.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をXでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Twitter class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                if (hostname.endsWith('instagram.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をInstagramでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Instagram class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    class="p-1 rounded transition-color hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Globe class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              })}
              {youtube && (
                <a
                  href={youtube}
                  target="_blank"
                  rel="noopener"
                  class="text-pink-11 transition-colors inline-flex flex-row items-center gap-0.5 p-1 rounded hover:bg-pink-3 active:bg-pink-4"
                  aria-label={`${name}の動画・ライブ配信をYoutubeで見る`}
                >
                  <Youtube class="inline w-4 h-4 stroke-[3px]" />
                  Youtube
                </a>
              )}
            </nav>
          )
        }
        {
          isFireworks && <>
            <hr class="text-violet-9"/>
            <Content />
          </>
        }
      </ColoredContainer>

      {
        youtubeWatchId && (
          <ColoredContainer class="!p-0 aspect-video relative">
          <small class="absolute pointer-events-none select-none flex px-2 py-1 mx-auto text-sm font-bold text-right rounded-2xl max-w-[50%] top-16 right-2 bg-mauve-a-11 text-mauve-1"><MessageCircleWarning class="w-4 h-4 stroke-[3px] shrink-0 mt-1"/>この動画配信は学生有志により行われているものであるため、<wbr />茨香祭実行委員会の管理下にはありません</small>
          <iframe width="560" height="315" class="w-full h-full overflow-hidden rounded-3xl" src={`https://www.youtube.com/embed/${youtubeWatchId}`} title="YouTube video player" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
          </ColoredContainer>
        )
      }

      <ButtonLink
        href="/event"
        class="mx-auto"
      >
        <LayoutGrid class="inline w-6 h-6 stroke-[2px] stroke-mauve-11" />
        <p class="text-base text-center text-mauve-11 font-Dela">
          イベントの一覧へ戻る
        </p>
      </ButtonLink>

      <div class="grid gap-6 xl:grid-cols-2">
        {
          nextEvent != null && nextEvent != undefined?
            <ColoredContainer color="violet" class="flex-col xl:order-2">
              <SubHeading as='h3' class='self-center'>次のイベント→</SubHeading>
              <EventCard type="list" slug={nextEvent} class="w-full" />
            </ColoredContainer>
          :<></>
        }

        {
          previousEvent!=null&&previousEvent!=undefined?
            <ColoredContainer color="violet" class="flex-col xl:order-1">
              <SubHeading as='h3' class='self-center'>←前のイベント</SubHeading>
              <EventCard type="list" slug={previousEvent} class="w-full" />
            </ColoredContainer>
        :<></>
        }
      </div>
    </main>

</Layout>
