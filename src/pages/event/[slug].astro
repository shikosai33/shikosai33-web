---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { formatDateTimeRange } from '@/utils/datetime/formatDateTimeRange';
import Layout from '@/layouts/Layout.astro';
import Slideshow from '@/components/slideshow.astro';
import Footer from '@/components/footer.astro';
import EventCard from '@/components/EventCard.astro';
import EventStatus from '@/components/EventStatus.astro';
import Shikosai33 from '@/assets/shikosai33_logo.png';
import {
  Clock,
  LayoutGrid,
  Globe,
  Instagram,
  Twitter,
  Youtube,
} from 'lucide-astro';

export async function getStaticPaths() {
  const eventEntries = (await getCollection('events')).sort((a, b) => {
    if (a.data.location.id == b.data.location.id) {
      return a.data['starts-at'].getTime() - b.data['starts-at'].getTime();
    }
    return a.data.location.id.localeCompare(b.data.location.id);
  });

  return eventEntries.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      previousEvent: index > 0 && eventEntries[index - 1]?.data.location.id == entry.data.location.id ? eventEntries[index - 1]?.slug : null,
      nextEvent:
        index < eventEntries.length - 1 && eventEntries[index + 1]?.data.location.id == entry.data.location.id ? eventEntries[index + 1]?.slug : null,
    },
  }));
}

const {
  entry: {
    data: {
      name,
      image,
      summary,
      urls,
      youtube,
      'starts-at': startsAt,
      'ends-at': endsAt,
    },
  },
  nextEvent: nextEvent,
  previousEvent: previousEvent,
} = Astro.props;

const { startsAtText, endsAtText } = formatDateTimeRange(startsAt, endsAt);
const hasExternalLinks = (urls && urls?.length > 0) || !!youtube;

// getStaticPaths() ignored in dynamic page /src/pages/event/[slug].astro.
// Add `export const prerender = true;` to prerender the page as static HTML during the build process.
export const prerender = true;
---

<Layout title="イベント">
  <main class="flex min-h-screen flex-col items-center justify-between p-24">
    <div
      class="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex"
    >
      <h1
        class="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30"
      >
        第33回茨香祭&nbsp;2024年10月26日,27日
      </h1>
    </div>

    <div
      class="relative z-[-1] flex place-items-center before:absolute before:h-[300px] before:w-full before:-translate-x-1/2 before:rounded-full before:bg-[radial-gradient(var(--tw-gradient-stops))] before:from-white before:to-transparent before:blur-2xl before:content-[''] after:absolute after:-z-20 after:h-[180px] after:w-full after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[''] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 sm:before:w-[480px] sm:after:w-[240px] before:lg:h-[360px]"
    >
      <Image
        src={Shikosai33}
        alt="第33回茨香祭のロゴ"
        class="relative dark:drop-shadow-[0_0_0.3rem_#ffffff70]"
      />
    </div>

    <Slideshow />
    <!-- ここから -->
    <div class="w-full flex flex-col gap-6">
      <div
        class="rounded-3xl overflow-hidden bg-gradient-to-b from-violet-9 to-mauve-a-1"
      >
        <div
          class="-mt-5 pt-5 bg-[url('../assets/kawaii_text_violet.png')] bg-center bg-cover"
        >
          <div
            class="flex flex-col gap-3 items-center bg-gradient-to-b from-transparent via-transparent to-mauve-1"
          >
            <div class="m-6 flex justify-center items-center relative">
              <Image
                src={image}
                alt={`${name}のアーティスト写真またはサムネイル`}
                loading="lazy"
                class="w-1/2 aspect-square rounded-xl absolute justify-self-center inset-0 blur-lg opacity-50"
              />
              <Image
                src={image}
                alt={`${name}のアーティスト写真またはサムネイル`}
                loading="lazy"
                class="w-1/2 aspect-square rounded-xl relative"
              />
            </div>
            <h2 class="relative whitespace-nowrap">
              <span
                data-text=`${name}`
                class:list={[
                  'inline-block text-5xl font-Dela text-violet-11 text-stroke-mauve-1 text-stroke-[8px] paint-sfm drop-shadow-bump shadow-mauve-6',
                  "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-gradient-to-b before:from-[#6C4DB6] before:to-[#371B6B] before:bg-clip-text before:pointer-events-none",
                ]}
              >
                {name}
              </span>
            </h2>
            <div class="flex gap-1.5">
              <p class="text-sm font-bold text-mauve-11">
                <Clock class="w-4 h-4 inline stroke-[3px] mr-1.5" />
                <time datetime={startsAt.toISOString()}>
                  {startsAt.getMonth() + 1}月{startsAt.getDate()}日({["日","月","火","水","木","金","土"][startsAt.getDay()]}) {startsAtText}
                </time>
                ~
                <time datetime={endsAt.toISOString()}>{endsAtText}</time>
              </p>
              <EventStatus startsAt={startsAt} endsAt={endsAt} />
            </div>
          </div>
        </div>
      </div>

      <div
        class="flex flex-col gap-3 p-6 rounded-3xl border border-solid border-violet-6 bg-gradient-to-b from-[#FDFCFD] to-[#FCFCFF] shadow-[0px_4px_16px_0px_rgba(51, 0, 255, 0.06)], shadow-[0px_4px_0px_0px_#A78BFA]"
      >
        <p
          class:list={[
            'text-lg  font-Dela text-mauve-3 text-stroke-2 text-stroke-mauve-11 paint-sfm flex-shrink',
          ]}
        >
          {summary}
        </p>
        {
          hasExternalLinks && (
            <nav
              aria-label={`${name}の外部リンク`}
              class="flex flex-row items-end justify-end flex-grow -mt-1 text-xs text-mauve-11 font-Dela"
            >
              {urls?.sort().map((url) => {
                const hostname = new URL(url).hostname;
                if (hostname.endsWith('x.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をXでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Twitter class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                if (hostname.endsWith('instagram.com')) {
                  return (
                    <a
                      href={url}
                      target="_blank"
                      rel="noopener"
                      aria-label={`${name}をInstagramでフォローする`}
                      class="p-1 transition-colors rounded hover:bg-mauve-3 active:bg-mauve-4"
                    >
                      <Instagram class="inline w-4 h-4 stroke-[3px]" />
                    </a>
                  );
                }
                return (
                  <a
                    href={url}
                    target="_blank"
                    rel="noopener"
                    class="p-1 rounded transition-color hover:bg-mauve-3 active:bg-mauve-4"
                  >
                    <Globe class="inline w-4 h-4 stroke-[3px]" />
                  </a>
                );
              })}
              {youtube && (
                <a
                  href={youtube}
                  target="_blank"
                  rel="noopener"
                  class="text-pink-11 transition-colors inline-flex flex-row items-center gap-0.5 p-1 rounded hover:bg-pink-3 active:bg-pink-4"
                  aria-label={`${name}の動画・ライブ配信をYoutubeで見る`}
                >
                  <Youtube class="inline w-4 h-4 stroke-[3px]" />
                  Youtube
                </a>
              )}
            </nav>
          )
        }
      </div>

      <a
        href="/event"
        class="w-auto m-auto px-4 py-2 flex justify-center items-center gap-2 rounded-full border-maube-2 shadow-[0px_4px_0px_0px_#8E8C99]"
      >
        <LayoutGrid class="inline w-6 h-6 stroke-[2px] stroke-mauve-11" />
        <p class="text-mauve-11 text-center font-Dela text-base">
          イベントの一覧へ戻る
        </p>
      </a>

      <div class="grid gap-6 xl:grid-cols-2">
        {
          nextEvent != null && nextEvent != undefined?
            <div
            class="flex flex-col justify-center items-center gap-3 p-6 rounded-3xl border border-solid border-violet-6 bg-gradient-to-b from-[#FDFCFD] to-[#FCFCFF] shadow-[0px_4px_16px_0px_rgba(51, 0, 255, 0.06)], shadow-[0px_4px_0px_0px_#A78BFA] xl:order-2"
            >
              <h3 class="relative inline-block rounded-lg bg-mauve-a-3">
                <span
                  data-text="次のイベント→"
                  class:list={[
                    'inline-block text-lg text-center font-Dela text-mauve-11 text-stroke-mauve-1 text-stroke-4 paint-sfm drop-shadow-bump shadow-mauve-6',
                    "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-mauve-11 before:bg-clip-text before:pointer-events-none",
                  ]}
                  >
                  次のイベント→
                </span>
              </h3>
              <EventCard type="list" slug={nextEvent} class="w-full" />
            </div>
          :<></>
        }

        {
          previousEvent!=null&&previousEvent!=undefined?
            <div
              class="flex flex-col justify-center items-center gap-3 p-6 rounded-3xl border border-solid border-violet-6 bg-gradient-to-b from-[#FDFCFD] to-[#FCFCFF] shadow-[0px_4px_16px_0px_rgba(51, 0, 255, 0.06)], shadow-[0px_4px_0px_0px_#A78BFA] xl:order-1"
            >
              <h3 class="relative inline-block rounded-lg bg-mauve-a-3">
                <span
                  data-text="←前のイベント"
                  class:list={[
                    'inline-block text-lg text-center font-Dela text-mauve-11 text-stroke-mauve-1 text-stroke-4 paint-sfm drop-shadow-bump shadow-mauve-6',
                    "before:content-[attr(data-text)/''] before:absolute before:inset-0 before:z-1 before:text-stroke-[0px] before:text-transparent before:bg-mauve-11 before:bg-clip-text before:pointer-events-none",
                  ]}
                >
                  ←前のイベント
                </span>
              </h3>
              <EventCard type="list" slug={previousEvent} class="w-full" />
            </div>
          :<></>
        }
      </div>
    </div>
    <!-- ここまで -->
  </main>
  <Footer />
</Layout>

<style>
  :root {
    --foreground-rgb: 0, 0, 0;
    --background-start-rgb: 214, 219, 220;
    --background-end-rgb: 255, 255, 255;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --foreground-rgb: 255, 255, 255;
      --background-start-rgb: 0, 0, 0;
      --background-end-rgb: 0, 0, 0;
    }
  }

  body {
    color: rgb(var(--foreground-rgb));
    background: linear-gradient(
        to bottom,
        transparent,
        rgb(var(--background-end-rgb))
      )
      rgb(var(--background-start-rgb));
  }
</style>
